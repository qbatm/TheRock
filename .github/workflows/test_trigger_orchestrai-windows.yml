name: Trigger OrchestrAI-TheRock-Windows

on:
  workflow_dispatch:
    inputs:
      simulate_failure:
        description: 'Simulate pipeline failure'
        type: boolean
        default: false
      simulate_windows_failure:
        description: 'Simulate Windows build failure'
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  setup:
    name: Mock Setup
    runs-on: ubuntu-24.04
    outputs:
      linux_amdgpu_families: '["gfx110X-dgpu"]'
      windows_amdgpu_families: '["gfx110X-dgpu"]'
      enable_build_jobs: 'true'
    steps:
      - name: Setup mock configuration
        run: |
          echo "Setting up mock TheRock pipeline configuration"
          echo "Linux families: gfx110X-dgpu"
          echo "Windows families: gfx110X-dgpu"

  mock_windows_build_and_test:
    name: Mock Windows Build & Test
    needs: setup
    runs-on: ubuntu-24.04  # Using ubuntu for simplicity in testing
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Mock ROCm Libraries Build (Windows)
        run: |
          echo "🔨 Mocking Windows ROCm libraries compilation..."
          echo "Building: hip-clr, rocblas, rocfft (Windows variants)..."
          sleep 3
          echo "✅ Windows ROCm libraries build completed"

      - name: Mock PyTorch Wheel Build (Windows)
        run: |
          echo "🐍 Mocking Windows PyTorch wheel creation..."
          echo "Building torch wheel for Windows..."
          echo "Target: gfx110X-dgpu"
          sleep 2
          
          if [[ "${{ inputs.simulate_windows_failure }}" == "true" ]]; then
            echo "❌ Simulated Windows build failure"
            exit 1
          fi
          
          echo "✅ Windows PyTorch wheels built successfully"

      - name: Mock Windows Tests
        run: |
          echo "🧪 Mocking Windows tests..."
          sleep 1
          echo "✅ Windows tests passed"

  mock_general_failure:
    name: Mock General Failure Job
    needs: setup
    runs-on: ubuntu-24.04
    if: ${{ inputs.simulate_failure }}
    steps:
      - name: Simulate failure
        run: |
          echo "❌ Simulating a general pipeline failure"
          exit 1

  ci_summary:
    name: CI Summary with Email Notification
    if: always()
    needs:
      - setup
      - mock_windows_build_and_test
      - mock_general_failure
    runs-on: ubuntu-24.04
    environment: email_creds
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.12'

      - name: Analyze mock pipeline results
        run: |
          echo "📊 Analyzing mock TheRock pipeline results..."
          echo '${{ toJson(needs) }}'
          
          FAILED_JOBS="$(echo '${{ toJson(needs) }}' \
            | jq --raw-output \
            'map_values(select(.result!="success" and .result!="skipped")) | keys | join(",")' \
          )"
          
          echo "Failed jobs detected: '$FAILED_JOBS'"
          
          # Set pipeline status and details
          if [[ "${FAILED_JOBS}" != "" ]]; then
            echo "PIPELINE_STATUS=failure" >> "$GITHUB_ENV"
            echo "FAILED_JOBS=${FAILED_JOBS}" >> "$GITHUB_ENV"
            echo "PIPELINE_DETAILS=Mock pipeline test - The following jobs failed: ${FAILED_JOBS}" >> "$GITHUB_ENV"
            echo "❌ Mock pipeline failed. Jobs that failed: ${FAILED_JOBS}"
          else
            echo "PIPELINE_STATUS=success" >> "$GITHUB_ENV"
            echo "FAILED_JOBS=" >> "$GITHUB_ENV"
            echo "PIPELINE_DETAILS=Mock pipeline test - All ROCm libraries and PyTorch wheels built and tested successfully!" >> "$GITHUB_ENV"
            echo "✅ Mock pipeline completed successfully!"
          fi

      - name: Send mock pipeline completion email
        if: always()
        env:
          RECIPIENT_EMAIL: "kuba.kubanczyk@gmail.com"
        run: |
          echo "📧 Sending mock pipeline completion email..."

          echo test
          echo ${{secrets.GMAIL_PASS}}
          
          # Build the command with conditional parameters
          CMD="python .github/sent_email.py --gmail-pass \"${{secrets.GMAIL_PASS}}\" --receiver \"$RECIPIENT_EMAIL\" --status \"$PIPELINE_STATUS\" --workflow-url \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\" --details \"$PIPELINE_DETAILS\" --platform Linux"
          
          # Add failed-jobs only if there are any
          if [[ -n "$FAILED_JOBS" ]]; then
            CMD="$CMD --failed-jobs \"$FAILED_JOBS\""
          fi
          
          echo "Executing: $CMD"
          
          # Execute the command
          eval $CMD
          
          echo "✅ Email notification sent!"

      - name: Display test summary
        if: always()
        run: |
          echo "🎭 Mock TheRock Pipeline Test Summary"
          echo "======================================"
          echo "Pipeline Status: $PIPELINE_STATUS"
          echo "Failed Jobs: $FAILED_JOBS"
          echo "Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "📧 Email notification has been sent to: kuba.kubanczyk@gmail.com"
          echo ""
          echo "This was a test run of the email notification system."
          echo "The actual TheRock pipeline will work the same way when it completes."


